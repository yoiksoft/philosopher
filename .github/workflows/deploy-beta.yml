name: Deploy to Beta environment

on:
  push:
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+"

env:
  YOIK_RESOURCE_ID: "beta"

jobs:
  deploy:
    runs-on: ubuntu-latest 

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: "3.9"

    - name: Setup Kubernetes CLI
      uses: matootie/dokube@v1.3.4
      with:
        personalAccessToken: ${{ secrets.DIGITALOCEAN_TOKEN }}
        clusterName: "kwot"
        version: "1.20.2"
        expirationTime: "900"
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.PAT }}

    - name: Parse version number
      id: gv
      run: echo "::set-output name=version::${GITHUB_REF##*/}"
    
    - name: Set GitHub Deployment status
      uses: bobheadxi/deployments@master
      id: dg
      with:
        step: start
        token: ${{ github.token }}
        desc: "Back-end for the Kwot app."
        env: Beta
      if: always()

    - name: Setup pipenv
      run: |
        python -m pip install --upgrade pipenv

    - name: Generate pip requirements
      run: |
        python -m pipenv lock --keep-outdated --requirements > $GITHUB_WORKSPACE/requirements.txt
        python -m pipenv lock --dev --keep-outdated --requirements > $GITHUB_WORKSPACE/requirements.dev.txt

    - name: Build and push image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ghcr.io/yoiksoft/philosopher:${{ steps.gv.outputs.version }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
    
    - name: Build and push development image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        build-args: |
          REQUIREMENTS_TXT=requirements.dev.txt
        tags: ghcr.io/yoiksoft/philosopher:${{ steps.gv.outputs.version }}-dev
        cache-from: type=local,src=/tmp/.buildx-cache-new
    
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Parse Kubernetes resource template with relevant data
      env:
        PHILOSOPHER_VERSION: ${{ steps.gv.outputs.version }}
        YOIK_RESOURCE_IMAGE: ghcr.io/yoiksoft/philosopher:${{ steps.gv.outputs.version }}
      run: |
        echo Preparing output directory...
        mkdir $GITHUB_WORKSPACE/.dist
        echo Replacing resource variables...
        cat $GITHUB_WORKSPACE/manifests/migrations.yml | envsubst > $GITHUB_WORKSPACE/.dist/migrate.yml
        cat $GITHUB_WORKSPACE/manifests/philosopher.yml | envsubst > $GITHUB_WORKSPACE/.dist/deploy.yml

    - name: Run migrations
      env:
        PHILOSOPHER_VERSION: ${{ steps.gv.outputs.version }}
      run: |
        echo Running database migrations...
        kubectl apply -f $GITHUB_WORKSPACE/.dist/migrate.yml
        echo Waiting for completion...
        kubectl wait --for=condition=complete --timeout=5m job/philosopher-$YOIK_RESOURCE_ID-migrations-$PHILOSOPHER_VERSION

    - name: Deploy changes
      run: |
        echo Deploying changes to Kubernetes...
        kubectl apply -f $GITHUB_WORKSPACE/.dist/deploy.yml
        echo Waiting for changes...
        kubectl rollout status deployment/philosopher-$YOIK_RESOURCE_ID -w --timeout=5m

    - name: Update GitHub Deployment status
      uses: bobheadxi/deployments@master
      with:
        step: finish
        token: ${{ github.token }}
        status: ${{ job.status }}
        deployment_id: ${{ steps.dg.outputs.deployment_id }}
        env_url: https://philosopher.yoik.software/${{ env.YOIK_RESOURCE_ID }}
      if: always()
